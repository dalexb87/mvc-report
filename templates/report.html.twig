{% extends "base.html.twig" %}

{% block title %}Magic number{% endblock %}

{% block body %}
    <h1>Redovisning</h1>
    <p>
        Skapa en route /report där du samlar dina redovisningstexter för kursens kmom.
        Skapa även så att länken /report#kmom01 leder direkt till kursmomentets redovisningstext.
    </p>
    <ul>
        <li><a href="#kmom01">kmom01</a></li>
        <li><a href="#kmom02">kmom02</a></li>
        <li><a href="#kmom03">kmom03</a></li>
        <li><a href="#kmom04">kmom04</a></li>
    </ul>
    
    <h2 id="kmom01">Kursmoment 1</h2>
    <h3 class="question">Berätta kort om dina förkunskaper och tidigare erfarenheter kring objektorientering</h3>
    <p>
        Jag har tidigare läst Java, C# så OOP är inte helt nytt för mig men jag får erkänna att jag aldrig lyckades känna mig riktigt bekväm med ämnet då jag stundvis upplevde det svårt att hålla reda på ut- och inparametrar och rent generellt flödet eller logiken i koden.<br>
        <br>
        Det var visserligen ett bra tag sedan jag läste en sådan kurs och jag vågar påstå att lärt mig mycket - allt möjligt, inom webbutveckling under den tiden. Exempelvis är node något som jag tyckte var mycket svårt första gången jag stötte på det, men nuförtiden känns det inte alls lika mäktigt.<br>
        <br>
        Jag misstänker därför att jag lär uppleva samma för just objektorientering inom PHP, särskilt då PHP är ett av mina favoritspråk!
    </p>
    
    <h3 class="question">Berätta kort om PHPs modell för klasser och objekt. Vilka är de grunder man behöver veta/förstå för att kunna komma igång och skapa sina första klasser?</h3>
    <p>
        Man kan säga att PHP följer grundprinciperna för objektorienterad programmering (OOP) väl.<br>
        Vi har klasser vilket kan tolkas som en "blueprint" till ett objekt. I en klass deklarerar vi namnsvariabler - beroende på vad för objekt man har i åtanke kan det röra sig om storleksrymder, färg och andra egenskaper eller funktioner som objektet ska kunna utföra.<br>
        <br>
        Ett objekt är enkelt uttryckt en instans av en klass vilket initieras med nyckelordet "new". När man skapar en instans på detta viset brukar man skicka med parametrar till en konstruktor som byggts i klassen.
        Den konstruktorn tar emot de inskickade värden och skapar ett nytt objekt baserat på de värdena.<br>
        <br>
        Slutligen har vi en metod som kan bearbeta värdena vidare eller helt enkelt bara presentera dem, exempelvis på en webbsida.<br>
        Metoden kan dynamiskt visa upp de värdena man skickat till konstruktorn genom att man skriver $this->[namnsvariabel].<br>
        Med andra ord är OOP ett mycket dynamiskt språk och inte ämnat för "hårdkodad" kod.
    </p>
    
    <h3 class="question">Reflektera kort över den kodbas, koden, strukturen som användes till uppgiften me/report, hur uppfattar du den?</h3>
    <p>
        Hittils tycker jag att den är väl strukturerad och betydligt lättare att förstå sig på än andra kodbaser vi använt i diverse kurser.<br>
        När man väl kommer igång så upplever jag det smärtfritt att hoppa från mapp till mapp och mellan filer, än så länge är det iallafall inte så många olika filer som man behöver hålla reda på.
    </p> 
    
    <h3 class="question">Med tanke på artikeln “PHP The Right Way”, vilka delar i den finner du extra intressanta och värdefulla? Är det några särskilda områden som du känner att du vill veta mer om? Lyft fram några delar av artikeln som du känner mer värdefulla.</h3>
    <p>
        Namespace är en mycket värdefull funktion och som det redan står i artikeln medför det att man inte behöver bekymra sig för att skapa eller importera klasser som delar namn. Så länge men definierar att klasser med samma namn finns på olika "namnrymder".<br>
        <br>
        PHPDOC. Jag får erkänna att jag är slarvig när det kommer till att kommentera min kod, så det faktum att det finns en standard för hur man bör skriva till kommentarer och annan information underlättar avsevärt - detta är alltså något som jag känner att jag skulle behöva bli bättre på.<br>
        I samma anda känner jag samma för andra kodstandarder - hur man skriver snygg kod helt enkelt, det är något som intresserar mig då jag oftast frågor mig själv om det verkligen är läsbar kod jag skrivit.
        <br>
        <br>
        Ett annat stycke som jag personligen tycker är intressant är koppling till databas med PDO. På ytan verkar det skilja sig något från den kod vi är vana vid att skriva i de andra kurserna vi gått men jag tror nog inte att det är så mycket mer komplicerat.<br>
        <br>
        Slutligen något som jag vet är av ytterst vikt är felhantering, I synnerhet när det kommer till felsökning. Då PHP inte alltid lyckas vara tydlig med vilka åtgärder som bör göras.
        
    </p>
    
    <h3 class="question">Vilken är din TIL för detta kmom?</h3>
    <p>
        Att skapa routes samt rendera data från klasser i twig-mallar, skapa arrayer med objekt och slumpmässigt ta från dessa med array_rand().<br>
        Returnera rå json-data och därmed skillnaden mellan response och jsonresponse.<br>
        <br>
        Lyckades även dynamiskt få fram webbplatsen routes och styra vilka som syns med ett skapat prefix, vilket jag är nöjd med då det tog lite tid att hitta vad för inbyggd funktionalitet jag kunde använda mig av.<br>
        Om jag inte minns fel har vi jobbat med twig förut i designkursen så det en välkommen bekantskap bland allt nytt så här långt.
    </p> 

    <h2 id="kmom02">Kursmoment 2</h2>
    <h3 class="question">Förklara kort de objektorienterade konstruktionerna arv, komposition, interface och trait och hur de används i PHP.</h3>
    <p>
        <strong>Arv</strong> gör det möjligt för en "barnklass" att ärva egenskaper/namnsvariabler och metoder från en "förälderklass".
        Detta kan man lyckas med genom att använda sig av nyckelordet extends. I korta drag innebär det att man i barnklassen sedan kan bygga vidare, utöka, med fler egenskaper och metoder då man ärver samtliga från förälderklassen.
        <br>
        <br>
        <strong>Komposition</strong> betyder att en klass består av instanser från en annan klass. Man kan alltså skapa nya instanser av en klass inuti en annan klass för att utöka funktionalitet och koppling mellan klasserna. Man kan säga att man helst vill dela upp uppgifter i flera olika, logiska klasser.
        Exempelvis kan en "hus" klass bestå av olika "rum" - då är alltså dessa två separata klasser, men man kan skapa en rum instans i hus-klassen och låta dessa ha logiska egenskaper och metoder.
        <br>
        <br>
        Ett <strong>"interface"</strong> är en eller flera metoder som en annan klass är tvungen att implementera. En viss kanske är tvungen att ha viss grundfunktionalitet och då vill man implementera detta från en interface där samtliga behövliga metoder ligger - och då måste de alltså även skapas i klassen också.
        <br>
        <br>
        Till skillnad från interface finns ett annat nyckelord <strong>"trait"</strong> som är lite lösare reglerat. Även det är en samling av metoder som man vill återanvända i sin app.
    </p>
    
    <h3 class="question">Berätta om din implementation från uppgiften. Hur löste du uppgiften, är du nöjd/missnöjd, vilken förbättringspotential ser du i din koden och dina klasser?</h3>
    <p>
        Jag började med att kolla på "gris"-spelet övningen som jag gjorde innan och försökte se vad för klasser som jag kunde återanvända och skriva om så de passade enligt kortleksuppgiften.
        I slutändan blev det dock mest DeckOfCards() klassen som fick stå för grovarbetet. Därefter började jag med att skapa min CardGameController. Uppgiften gick ut på att skapa en kortlek där varje kort i slutändan skulle ha någon slags grafik. Jag väntade dock just det kravet och började med två enkla arrayer som var strängvärden.<br>
        <br>
        Allt eftersom började jag skapa kontroller och routes för de olika sidorna under kriterier - i övningsuppgiften hade vi lärt oss om sessionen så den biten var till en början smärtfri.
        <br>
        <br>
        Vid det här laget hade jag redan skapat klassen DeckOfCards så jag skapade en ny instans av den för varje route och kallade på metoderna i den. getCards() för att skriva ut arrayerna som byggs med deck() i samma klass, shuffle() för att blanda om korten, dealCard() för att hämta ett kort och så vidare.<br>
        <br>
        Varje gång sparade jag även när kortleken till sessionen, vilket behövdes för när man skulle dra ett eller flera kort. Samt att varje kontroll inleddes med en session->get för att hämta kortleken och skicka den till konstruktorn i DeckOfCards klassen.<br>
        Detta bortsett från "shuffle" rutten som bygger om hela kortleken genom att man inte skicka med något.
        <br>   
        <br>
        Den grafiska representationen av kortleken löse jag relativt lätt genom att använda mig av associativa arrayer som matchade inkommande nycklar och fick ut UNICODE symbolerna.
        Jag är rätt så nöjd med hur kodstrukturen och funktionaliteten är implementerad även om jag inser att det finns utrymme för förbättring, är även tveksam på om jag verkligen löste arv och kompositionsdelen "korrekt".<br>
        <br>
        Vidare kanske logiken av klasserna kunde varit mer tydlig och uppdelat då just DeckOfCards blev lite "stor". CardHand() klassen fick jag exempelvis aldrig användning av så det är ett frågetecken om jag kunde använt den på något vis.<br>
        <br>
        Trots detta har jag fått till ett inslag av arv genom att "extenda" CardGraphic klassen med Card och ärva dess egenskaper och metoder samt att jag även har ett inslag av komposition i DeckOfCards där ursprungsarryer med strängvärden skickas som argument till en instans av CardGraphic för att bygga om till grafiska symboler via de associativa arrayerna jag nämnde tidigare.<br>
        Det var en rätt så stor uppgift och allt som allt är jag nöjda, men det där med arv och komposition är jag som sagt osäker på.
    </p>
    
    <h3 class="question">Vilka är dina reflektioner så här långt med att jobb i Symfony med applikationskod enligt MVC?</h3>
    <p>
        Till skillnad från andra utvecklingsmiljöer som vi använt oss av i kurserna tycker jag att detta känns mest behändigt. Det tycks inte vara fullt lika många mappar och filer att hålla reda på och att nagivera mellan klasser/moduler, controllers och templates känns både smidigt och vettigt.<br>
        <br>
        Så kortsagt tycker jag att Symfony är kul att utveckla i jämförelse med några andra miljöer vi prövat.
    </p>
    
    <h3 class="question">Vilken är din TIL för detta kmom?</h3>
    <p>
        Det var ännu en maffig uppgift så det är svårt att komma ihåg allt men - ett litet intro till hur man skapar klasser och arv samt skapa metoder i dessa klasser som utför olika funktionaliteter. Lite komposition genom att en klass är beroende av en annan som är fallet med min CardGraphic() klass.<br>
        <br>
        Jag byggde även om min "api" sida och skapade två egna arrayer för route och beskrivning varpå jag använde en foreach loop för att slå ihop de till en vilken jag sedan skicka med som data till en render.<br>
        Lite I samma anda har jag använt ett flertal nestlade foreach-loopar för att åstadkomma samma sak när jag exempelvis ville koppla ihop "suite" och "value" arrayerna för kortleken och slå samman de i en och samma, så att jag kunde plocka ut ett eller flera kort som hörde ihop.<br>
        <br>
        Jag lärde mig om flash-meddelande och hur smidigt det var att rendera dessa i en separat mall som man sedan "includa" efter behov. Det var även lite om session och hur man skapade, lagrade sessionsdata och kunde ta bort en sådan.<br>
        <br>
        Vidare var jag tvungen att lära mig om associativ arrayer för att lära mig hur man kunde hämta upp ett värde/nyckel från en array och konvertera det till ett annat.<br>
        <br>
        Annars mycket användning av metoder främst i DeckOfCards() klassen samt att jag var tvungen att spara undan sessionens kortlek och skicka med den till konstruktorn.
    </p>
    
    <h2 id="kmom03">Kursmoment 3</h2>
    <h3 class="question">Fråga</h3>
    <p>Svar</p>
    
    <h2 id="kmom04">Kursmoment 4</h2>
    <h3 class="question">Fråga</h3>
    <p>Svar</p>
    
    <h3 class="question">Fråga</h3>
    <p>Svar</p>
    
    <h3 class="question">Fråga</h3>
    <p>Svar</p>
    
{% endblock %}